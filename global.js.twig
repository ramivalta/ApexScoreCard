var workshift_json_update  = '{{ path('workshift_json_update') }}';
var workshift_json_create  = '{{ path('workshift_json_create') }}';
var workshift_json_delete  = '{{ path('workshift_json_delete') }}';
var workshift_json_list    = '{{ path('workshift_json_list') }}';
var workshift_json_inshift = '{{ path('workshift_json_inshift') }}';
var reservation_json_list  = '{{ path('reservation_json_list') }}';
var reservation_json_new   = '{{ path('reservation_json_new') }}';
var reservation_json_edit  = '{{ path('reservation_json_edit') }}';
var reservation_json_delete  = '{{ path('reservation_json_delete') }}';
var workshift_json_get_shifts = '{{ path('workshift_json_get_shifts')}}';
var workshift_json_update_shifts = '{{ path('workshift_json_update_shifts') }}';

var blockBig = {message: $('#hiihtaa-block-big')};
var blockSmall = {message: $('#hiihtaa-block-small')};

function showInfo(text1,text2) {
    $.blockUI.defaults.growlCSS.background = '#000 url("{{ asset('bundles/hanmanhiihtaavaan/images/accepted_48.png')}}") 10px 10px no-repeat';
    showGrowl(text1, text2); 
}

function showError(text1,text2) {
    $.blockUI.defaults.growlCSS.background = '#000 url("{{ asset('bundles/hanmanhiihtaavaan/images/cancel_48.png')}}") 10px 10px no-repeat';
    showGrowl(text1, text2); 
}
function showGrowl(text1,text2)
{
    if (text1 == '') text1 = '<br/>';
    if (text2 == '') text2 = '<br/>';
    $.growlUI(text1, text2); 
}

function ControllerProxy() {
    var self = this;

    // *** Call a wrapped object
    self.post = function (url, data, callback, error, anyway) {

        var json;
        if (data != null) {
            json = JSON.stringify(data);
        } else {
            json = null;
        }

        // *** The service endpoint URL        
        
        $.ajax({
            url: url,
            data: json,
            type: "POST",
            processData: false,
            contentType: "application/json; charset=utf-8",
            timeout: 10000,
            dataType: "json"
        }).done(function (res) {
                if (!callback) return;
                callback(res);
                return;
        }).fail(function (xhr) {
			var responseTextErr = xhr.responseText;
			if (responseTextErr) {
				if (error) error(responseTextErr);
				else showError('FAIL', responseTextErr);
			}
			return;
		}).always(function() {
                if (anyway) anyway();
		});
            
    };
}

var ReservationProxy = function() {
    var self = this;
    self.proxy = new ControllerProxy();

    self.GetReservation = function(data, done, always, fail) {
        self.proxy.post('{{ path('reservation_json_get')}}', data, done, fail, always);
    };
    self.Save = function(data, done, always, fail) {
        self.proxy.post('{{ path('reservation_json_save') }}', data, done, fail, always);
    };
};
var reservationProxy = new ReservationProxy();


var WorkshiftProxy = function() {
    var self = this;
    self.proxy = new ControllerProxy();
    
    self.GetShifts = function(data, done, always, fail){
        self.proxy.post('{{ path('workshift_json_get_shifts')}}', data, done, fail, always);
    };
    
    self.UpdateShifts = function(data, done, always, fail){
        self.proxy.post('{{ path('workshift_json_update_shifts') }}', data, done, fail, always);
    };
}
var workshiftProxy = new WorkshiftProxy();

var WorkshiftPlanProxy = function() {
    var self = this;
    self.proxy = new ControllerProxy();
    
    self.AdminGetShifts = function(data, done, always, fail){
        self.proxy.post('{{ path('workshift_plan_admin_json_get_shifts')}}', data, done, fail, always);
    };
    
    self.AdminUpdateShifts = function(data, done, always, fail){
        self.proxy.post('{{ path('workshift_plan_admin_json_update_shifts') }}', data, done, fail, always);
    };
    
    self.InstrGetShifts = function(data, done, always, fail){
        self.proxy.post('{{ path('workshift_plan_instr_json_get_shifts')}}', data, done, fail, always);
    };
    
    self.InstrUpdateShifts = function(data, done, always, fail){
        self.proxy.post('{{ path('workshift_plan_instr_json_update_shifts') }}', data, done, fail, always);
    };
    
    self.DoCalculate = function(data, done, always, fail){
        self.proxy.post('{{ path('workshift_plan_json_calc') }}', data, done, fail, always);
    };
}
var workshiftPlanProxy = new WorkshiftPlanProxy();

var WerneriEventProxy = function() {
    var self = this;
    self.proxy = new ControllerProxy();
    
    self.GetCourseEvents = function(data, done, always, fail){
        self.proxy.post('{{ path('werneri_event_json_show_course_events')}}', data, done, fail, always);
    };

    self.DeleteEvent = function(data, done, always, fail) {
        self.proxy.post('{{path('werneri_event_json_delete')}}', data, done, fail, always);
    };

    self.SaveEvent = function(data, done, always, fail) {
        self.proxy.post('{{path('werneri_event_json_save')}}', data, done, fail, always);
    };

    self.GetCourseStudents = function(data, done, always, fail) {
        self.proxy.post('{{path('werneri_course_json_list_students')}}', data, done, fail, always);
    };

    self.DeleteStudent = function(data, done, always, fail) {
        self.proxy.post('{{path('werneri_student_json_delete')}}', data, done, fail, always);
    };

    self.SaveStudent = function(data, done, always, fail) {
        self.proxy.post('{{path('werneri_student_json_save')}}', data, done, fail, always);
    };     
};
var werneriEventProxy = new WerneriEventProxy();

var EventProxy = function() {
    var self = this;
    self.proxy = new ControllerProxy();
    
    self.GetEventCategories = function(data, done, always, fail){
        self.proxy.post('{{ path('event_json_list_event_categories')}}', data, done, fail, always);
    };
    self.GetEvents = function(data, done, always, fail){
        self.proxy.post('{{ path('event_json_list_events')}}', data, done, fail, always);
    };

    self.SaveEventCategory = function(data, done, always, fail){
        self.proxy.post('{{ path('event_json_save_event_category')}}', data, done, fail, always);
    };

    self.MoveEventCategory  = function(data, done, always, fail){
        self.proxy.post('{{ path('event_json_move_event_category')}}', data, done, fail, always);
    };

    self.SaveEvent = function(data, done, always, fail){
        self.proxy.post('{{ path('event_json_save_event')}}', data, done, fail, always);
    };

    self.DeleteEvent = function(data, done, always, fail){
        self.proxy.post('{{ path('event_json_delete_event')}}', data, done, fail, always);
    };    
};

var eventProxy = new EventProxy();

function makeId() {
    var text = "id_";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for( var i=0; i < 8; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}